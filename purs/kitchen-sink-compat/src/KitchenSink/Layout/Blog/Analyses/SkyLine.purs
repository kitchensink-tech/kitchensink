-- File auto generated by purescript-bridge! --
module KitchenSink.Layout.Blog.Analyses.SkyLine where

import Data.Argonaut.Aeson.Decode.Generic (genericDecodeAeson)
import Data.Argonaut.Aeson.Encode.Generic (genericEncodeAeson)
import Data.Argonaut.Aeson.Options as Argonaut
import Data.Argonaut.Decode.Class (class DecodeJson, class DecodeJsonField, decodeJson)
import Data.Argonaut.Encode.Class (class EncodeJson, encodeJson)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Prim (Array, Int, String)
import Type.Proxy (Proxy(Proxy))

import Prelude

newtype SkyLine =
    SkyLine {
      skylineItems :: Array SkyLineItem
    }

instance encodeJsonSkyLine :: EncodeJson SkyLine where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonSkyLine :: DecodeJson SkyLine where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericSkyLine :: Generic SkyLine _
derive instance newtypeSkyLine :: Newtype SkyLine _

--------------------------------------------------------------------------------
_SkyLine :: Iso' SkyLine { skylineItems :: Array SkyLineItem}
_SkyLine = _Newtype

--------------------------------------------------------------------------------
data SkyLineItem =
    HeaderMark String (Array Int)
  | ImageMark String String
  | TextualMark Int (Array Int)

instance encodeJsonSkyLineItem :: EncodeJson SkyLineItem where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonSkyLineItem :: DecodeJson SkyLineItem where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericSkyLineItem :: Generic SkyLineItem _

--------------------------------------------------------------------------------
_HeaderMark :: Prism' SkyLineItem { a :: String, b :: Array Int }
_HeaderMark = prism' (\{ a, b } -> HeaderMark a b) f
  where
    f (HeaderMark a b) = Just $ { a: a, b: b }
    f _ = Nothing

_ImageMark :: Prism' SkyLineItem { a :: String, b :: String }
_ImageMark = prism' (\{ a, b } -> ImageMark a b) f
  where
    f (ImageMark a b) = Just $ { a: a, b: b }
    f _ = Nothing

_TextualMark :: Prism' SkyLineItem { a :: Int, b :: Array Int }
_TextualMark = prism' (\{ a, b } -> TextualMark a b) f
  where
    f (TextualMark a b) = Just $ { a: a, b: b }
    f _ = Nothing

--------------------------------------------------------------------------------
