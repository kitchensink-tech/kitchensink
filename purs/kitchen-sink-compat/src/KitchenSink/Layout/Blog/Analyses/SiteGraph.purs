-- File auto generated by purescript-bridge! --
module KitchenSink.Layout.Blog.Analyses.SiteGraph where

import Data.Argonaut.Aeson.Decode.Generic (genericDecodeAeson)
import Data.Argonaut.Aeson.Encode.Generic (genericEncodeAeson)
import Data.Argonaut.Aeson.Options as Argonaut
import Data.Argonaut.Decode.Class (class DecodeJson, class DecodeJsonField, decodeJson)
import Data.Argonaut.Encode.Class (class EncodeJson, encodeJson)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Tuple (Tuple)
import Prim (Array, Int, String)
import Type.Proxy (Proxy(Proxy))

import Prelude

newtype TopicGraph =
    TopicGraph {
      nodes :: Array (Tuple String Node)
    , edges :: Array (Tuple String String)
    }

instance encodeJsonTopicGraph :: EncodeJson TopicGraph where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonTopicGraph :: DecodeJson TopicGraph where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericTopicGraph :: Generic TopicGraph _
derive instance newtypeTopicGraph :: Newtype TopicGraph _

--------------------------------------------------------------------------------
_TopicGraph :: Iso' TopicGraph { nodes :: Array (Tuple String Node), edges :: Array (Tuple String String)}
_TopicGraph = _Newtype

--------------------------------------------------------------------------------
data Node =
    TopicNode String Int
  | ArticleNode String Int
  | ImageNode String
  | ExternalKitchenSinkSiteNode String

instance encodeJsonNode :: EncodeJson Node where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonNode :: DecodeJson Node where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericNode :: Generic Node _

--------------------------------------------------------------------------------
_TopicNode :: Prism' Node { a :: String, b :: Int }
_TopicNode = prism' (\{ a, b } -> TopicNode a b) f
  where
    f (TopicNode a b) = Just $ { a: a, b: b }
    f _ = Nothing

_ArticleNode :: Prism' Node { a :: String, b :: Int }
_ArticleNode = prism' (\{ a, b } -> ArticleNode a b) f
  where
    f (ArticleNode a b) = Just $ { a: a, b: b }
    f _ = Nothing

_ImageNode :: Prism' Node String
_ImageNode = prism' ImageNode f
  where
    f (ImageNode a) = Just $ a
    f _ = Nothing

_ExternalKitchenSinkSiteNode :: Prism' Node String
_ExternalKitchenSinkSiteNode = prism' ExternalKitchenSinkSiteNode f
  where
    f (ExternalKitchenSinkSiteNode a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
