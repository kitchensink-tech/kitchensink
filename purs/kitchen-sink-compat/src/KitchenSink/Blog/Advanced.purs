-- File auto generated by purescript-bridge! --
module KitchenSink.Blog.Advanced where

import Data.Argonaut.Aeson.Decode.Generic (genericDecodeAeson)
import Data.Argonaut.Aeson.Encode.Generic (genericEncodeAeson)
import Data.Argonaut.Aeson.Options as Argonaut
import Data.Argonaut.Decode.Class (class DecodeJson, class DecodeJsonField, decodeJson)
import Data.Argonaut.Encode.Class (class EncodeJson, encodeJson)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Tuple (Tuple)
import Prim (Array, Int, String)
import Type.Proxy (Proxy(Proxy))

import Prelude

newtype TopicGraph =
    TopicGraph {
      nodes :: Array (Tuple String Node)
    , edges :: Array (Tuple String String)
    }

instance encodeJsonTopicGraph :: EncodeJson TopicGraph where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonTopicGraph :: DecodeJson TopicGraph where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericTopicGraph :: Generic TopicGraph _
derive instance newtypeTopicGraph :: Newtype TopicGraph _

--------------------------------------------------------------------------------
_TopicGraph :: Iso' TopicGraph { nodes :: Array (Tuple String Node), edges :: Array (Tuple String String)}
_TopicGraph = _Newtype

--------------------------------------------------------------------------------
data Node =
    TopicNode String Int
  | ArticleNode String Int
  | ImageNode String

instance encodeJsonNode :: EncodeJson Node where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonNode :: DecodeJson Node where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericNode :: Generic Node _

--------------------------------------------------------------------------------
_TopicNode :: Prism' Node { a :: String, b :: Int }
_TopicNode = prism' (\{ a, b } -> TopicNode a b) f
  where
    f (TopicNode a b) = Just $ { a: a, b: b }
    f _ = Nothing

_ArticleNode :: Prism' Node { a :: String, b :: Int }
_ArticleNode = prism' (\{ a, b } -> ArticleNode a b) f
  where
    f (ArticleNode a b) = Just $ { a: a, b: b }
    f _ = Nothing

_ImageNode :: Prism' Node String
_ImageNode = prism' ImageNode f
  where
    f (ImageNode a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
newtype SkyLine =
    SkyLine {
      skylineItems :: Array SkyLineItem
    }

instance encodeJsonSkyLine :: EncodeJson SkyLine where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonSkyLine :: DecodeJson SkyLine where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericSkyLine :: Generic SkyLine _
derive instance newtypeSkyLine :: Newtype SkyLine _

--------------------------------------------------------------------------------
_SkyLine :: Iso' SkyLine { skylineItems :: Array SkyLineItem}
_SkyLine = _Newtype

--------------------------------------------------------------------------------
data SkyLineItem =
    HeaderMark String (Array Int)
  | ImageMark String String
  | TextualMark Int (Array Int)

instance encodeJsonSkyLineItem :: EncodeJson SkyLineItem where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonSkyLineItem :: DecodeJson SkyLineItem where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericSkyLineItem :: Generic SkyLineItem _

--------------------------------------------------------------------------------
_HeaderMark :: Prism' SkyLineItem { a :: String, b :: Array Int }
_HeaderMark = prism' (\{ a, b } -> HeaderMark a b) f
  where
    f (HeaderMark a b) = Just $ { a: a, b: b }
    f _ = Nothing

_ImageMark :: Prism' SkyLineItem { a :: String, b :: String }
_ImageMark = prism' (\{ a, b } -> ImageMark a b) f
  where
    f (ImageMark a b) = Just $ { a: a, b: b }
    f _ = Nothing

_TextualMark :: Prism' SkyLineItem { a :: Int, b :: Array Int }
_TextualMark = prism' (\{ a, b } -> TextualMark a b) f
  where
    f (TextualMark a b) = Just $ { a: a, b: b }
    f _ = Nothing

--------------------------------------------------------------------------------
newtype LinkInfo =
    LinkInfo {
      linkURL :: String
    , linkText :: String
    }

instance encodeJsonLinkInfo :: EncodeJson LinkInfo where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonLinkInfo :: DecodeJson LinkInfo where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericLinkInfo :: Generic LinkInfo _
derive instance newtypeLinkInfo :: Newtype LinkInfo _

--------------------------------------------------------------------------------
_LinkInfo :: Iso' LinkInfo { linkURL :: String, linkText :: String}
_LinkInfo = _Newtype

--------------------------------------------------------------------------------
newtype ImageInfo =
    ImageInfo {
      imageURL :: String
    , imageText :: String
    }

instance encodeJsonImageInfo :: EncodeJson ImageInfo where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonImageInfo :: DecodeJson ImageInfo where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericImageInfo :: Generic ImageInfo _
derive instance newtypeImageInfo :: Newtype ImageInfo _

--------------------------------------------------------------------------------
_ImageInfo :: Iso' ImageInfo { imageURL :: String, imageText :: String}
_ImageInfo = _Newtype

--------------------------------------------------------------------------------
