=base:build-info.json
{"layout":"article"
,"publicationStatus":"Public"
}

=base:preamble.json
{"author": "Lucas DiCioccio"
,"title": "The Kitchen Sink philosophy"
}

=base:topic.json
{"topics":["philosophy"]
,"keywords":["static-site generators", "design", "position paper"]
}

=base:social.json
{"twitter": "lucasdicioccio"
,"linkedin": "lucasdicioccio"
,"github": "lucasdicioccio"
}

=base:main-css.css
@import "/css/dev.css";
@import "/css/colors.css";
@import "/css/article.css";
@import "/css/navigation.css";


=base:summary.cmark

In these pages, I sometimes use "__It's a kitchen-sink!__" as a placeholder for
apologetic or unapologetic statements regarding the lack of sophistication of
Kitchen-Sink. This article positions a few tenents for Kitchen-Sink, and
hopefully helps you get a feel the experience we want to build around this
software.

=base:main-content.cmark

In these pages, I sometimes use "__It's a kitchen-sink!__" as a placeholder for
apologetic or unapologetic statements regarding the lack of sophistication of
Kitchen-Sink. I lament when something is suboptimal but ought to be improved. I
duck out when something is suboptimal but ought to be left out scope. Let me
explain the three Kitchen-Sink tenets.

# The Kitchen-Sink tenets

The name of the blog-engine is not just a pun about where just dumping files in
a directory to make a blog. There's some philosophy behind the name, a
philosophy that I grew out of experience: a mix of frivolity, defeatism, and
awe -- applied to small static sites and blogs.

__Frivolity__. When you are too lazy to wash and sort plates, you drop them in
the kitchen sink. You'll come back later. In short, _take it easy_.  The world
is tough enough to add extra-high expectation onto oneself. Blogging should be
the similarly lightweight. Unless you want to make a career out of blogging,
you should be frivolous about your online site.

__Defeatism__. Humans often fall in for the same traps. Rather than doing
something, we find roundabout ways for not doing them. A sure-fire way for
engineers to lose time is while trying to organize things in large hierarchies
and inter-connected ontologies ... when there is alomost no content to
organize. Blogging is the primary use-case for Kitchen-sink. In this context, I
feel afraid that people spend time organizing and preparing a blog but then
write no articles. Rather, I think the key value of blogs is in having content
from people voicing their unique opinions.  If it's only in text files with no
colors, then so be it.

__Awe__. I have a huge amount of respect for scrapy and low-tech solutions
providing outsized results. Such solutions typically _do not scale_ and require
engineering to step up in intrisinc (or perceived) quality.  When asked to grow
a low-tech solution into some more professional service, engineers tend to
codify processes and invent complex hierarchies before having any content to
arrange (cf. the above point on defeatism). When approaching the world with a
frivolous mindset, a tool that only works for the easy-mode will feel awesome
because these easy problems will be the ones you'll encounter most of the time.
Regarding blogging this tenet means that the world improves when articles are
written, even if these articles lack perfection.

# Implications of the Kitchen Sink tenets regarding the blog engine

There are a few implications and many possible misunderstanding regarding the
tenets. In particular being _frivolous_ and in _awe_ of scrapy solutions looks
like being in opposition with "professional".

__Organization-wise__. Kitchen-Sink is not a good fit if you have strong opinions
about hierarchies of information. Rather, the modus-operandi is: thinking about
writing something? throw it into the Kitchen Sink.  Where do we put source
files? in the Kitchen-Sink; where do we put CSS files?  in the Kitchen-Sink;
where do we save images? in the Kitchen-Sink.  If someone looks for what you
have written: they can look in the Kitchen Sink. If people do not find what
they are looking for, then only it may become interesting to add extra
structure. You may even want to grow out of Kitchen-Sink and it's fine. The
Kitchen-Sink philosophy will help you with that because you won't have annoying
problems like file conflict names to start with. In short, throw things in the
Kitchen Sink, it's easy to remove them from here anyway.

__Project-wise.__ I think that there is a distinction between honest but
hard-to-swallow feedback and contempt or guardkeeping.  Thus, when someone
approaches Kitchen-Sink saying it is inadequate for their use case: good. When
someone says the whole project is a waste of time because they already have a
wash basin: not good.  If we regard time as a scarce resource, then adding
content to a site is a budget-allocation game where the time-budget is small. I
can honestly say I've lost so much time on _modern_ or _flexible_ or
_$marketing-term_ tools. I believe a number of websites would benefit from
having fewer features of the modern web and more content instead. I think the
web would be better with more ugly websites having great content over pretty
content-farmed websites.  Markdown is awesome but you would prefer
something else and do not want to contribute it? well, even though Kitchen-Sink
could support new formats we're not chasing features, we're chasing content.

__Technically.__ Being frivolous and in awe of scrapy solutions does not mean
that Kitchen-Sink should be irritating to use. Usability and correctness are a
concern, otherwise some [features](/features.html) like live-reload and the
section-based format would not exist. Correctness may suffer a bit when things
lack a good definition or inconsequential (e.g., the word-count not taking
into account titles in the sections they start -- feature or bug, I cannot
tell, but definitely not a huge deal).

=base:taken-off.cmark

## implications and non-implications

There are so many things I would like to list and that we could derive from
thre three tenets of the Kitchen-Sink philosophy.

- be kind onto yourself
- don't compare yourself too much, from an engineering standpoint yes, from who has the longest feature-list: no
- favor versatility, even if it means bending the system a bit
- does not mean that Kitchen-Sink should be irritatingly slow and full of bugs
- when you take inspiration from something awesome, try to credit people

## illustrating the tenets in the features

If you are already familiar with [Kitchen Sink Features](/features.html).

- The section-based format is a defeatist echo: I grew tired of templates of
  templates of templates. An article should mostly be a file, and when tuning
something on an article I should not pass conditionals across languages between
systems.
- A number of features are advertised even if they are not really complete. The wordcount is wonky and skips titles (at the time of writing). Still, I should not put this error in the way of writing articles. The goals of the wordcount is to be approximatively correct to help readers know whether the article can be read on the potty or over the commute. 
- Open-graph, twitter meta tags and other meta information are simple and awesome ways to propagate information around even if the solution seem unsatisfying: it does the job.
- Markdown and Commonmark: they do the job, I can write, I get most of the HTML I care for a long blog-post: awesome.

